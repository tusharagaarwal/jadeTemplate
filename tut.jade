html
	head
		title= pageTitle
		link(rel="stylesheet" href="./style.css")
	body
		header
			h1= pageTitle
		nav
			ul(style="list-style:none;")
				li Home
				li About
				li Contact
		div#main_container
			article
				h1= title
				p= body
			article
			// parameters can be static "strings" or dynamic (variables)
				form(action="./submit")
					a(href=url, data-active=isActive)
					label
					// use pipes to write content of html in new line - the line with pipe becomes the inner html in following
						input(type="checkbox", checked=isChecked)
						| yes / no
			// variables for above witll be passed as
			//{
			//url:"/logout",
			//isActive: true,
			//isChecked: false
			//}
			// apply the id and class directly on the tags using . and # for classes and ids respectively
			aside.nav_pills
				ul
					li Side Menu item1
					li side menu item2
			// when a tag name is missed, div is used automatically
			#side-bar.pull-right
			// so in above example the code will become 
			// <div id="side-bar" class="pull-right"></div>
			// outputting raw text is done via |
			div
				| Jade is a template ingine
				| It can be used in MNode.js and in the browser JS
		footer
			p Copyright 2016 - Tushar
		// to write inline java script or style tags follow the template below
		script.
			console.log('Hello Jade!')
			setTimeout(function(){
				window.location.href='http://rpjs.co'
			},200))
			console.log('Good bye!')
		// to write compile time script that manipulates the output of the jade template
		- var arr = ['<a>','<b>','<c>']
		ul
		- for (var i = 0; i< arr.length; i++)
			li
				span= i
				span!="unescaped: " + arr[i] + " vs. "
				span= "escaped: " + arr[i]
		// above will produce the code below
		//
		//<ul>
		//<li><span>0</span><span>unescaped: <a> vs. </span><span>escaped: &lt;a&gt;</span></li>
		//<li><span>1</span><span>unescaped: <b> vs. </span><span>escaped: &lt;b&gt;</span></li>
		//<li><span>2</span><span>unescaped: <c> vs. </span><span>escaped: &lt;c&gt;</span></li>
		//</ul>
		//
		// COMMENTS
		// comments like this will be rendered as comments int he html
		//- this commnet will not be rendered in the HTML
		// CONDITIONS (if)
		// other than the standard JS if (which we prefix with -) we can also use jade minimalist alternative with no prefix and no parenthesis
		- var user = {}
		- user.admin = Math.random()>0.5
		if user.admin
			button(class="launch") Launch Spacecraft
		else
			button(class="login") Log in
		// ITERATIONS (each loops)
		//	index is 0 initiated, keys when the object is used instead of an array.
		- var languages = ['php', 'node', 'ruby']
		div
		each value, index in languages
			p= index + ". " + value
		- var languages = {'php': -1, 'node': 2, 'ruby':1}
		div
		each value, key in languages
			p= key + ": " + value
		// INTERPOLATION - 
		// to output a variable in HTML use #{variable_name}
		- var title = "Something special"
		p Read the #{title} in PDF, MODI, shit
		// do not use - with interpolation coz it is processed at time of template compilation and not when the page is rendered.
		// CASE
		- var coins = Math.round(Math.random()*10)
		case coins
			when 0
				p You have no money
			when 1
				p You have a coin
			default
				p You have #{coins} coins!
		// MIXINS - FUNCTIONS that take some params and generate HTML
		// declared using >> mixin name(params)
		// called using >> +name(data)
		mixin row(items)
			tr
				each item, index in items
					td= item
		mixin table(tableData)
			table
				each row, index in tableData
					+row(row)
		- var node = [{name: "Express"}, {name:"hapi"},  {name: "derby"}]
		+table(node)
		- var js = [{name: "backbone"}, {name: "angular"}, {name: "ember"}]
		+table(js)
		// INCLUDE
		// include ./includes/header (include the various files to split the logic
		// include ../includes/footer (possible to traverse up the tree)
		// but yiu cannot use a variable instead of pathname because includes/partials are handled at compilation and not runtime
		// EXTEND
		// botton to top approach (as oppose to include)
		// included file commands which part of main file it wants to replace
		// > in file_a:
		//block header
		//	p some default text
		//block content
		//	p Loading...
		//block footer
		//	p copyright
		// > in file_b:
		//extend file_a
		//block header
		//	p very specific text
		//block content
		// .main-content